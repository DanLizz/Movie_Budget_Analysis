# -*- coding: utf-8 -*-
"""Movie Budget Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W7QId3Vw-CA3iWtnDqaKNCp2YwDQ9gSB

# Introduction

Do higher film budgets lead to more box office revenue? Let's find out if there's a relationship using the movie budgets and financial performance data that I've scraped from [the-numbers.com](https://www.the-numbers.com/movie/budgets) on **May 1st, 2018**. 

<img src=https://i.imgur.com/kq7hrEh.png>

# Import Statements
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression

"""# Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

"""# Read the Data"""

data = pd.read_csv('cost_revenue_dirty.csv')

"""# Explore and Clean the Data

1. How many rows and columns does the dataset contain?
"""

data.shape

data.sample(5)

"""2. Are there any NaN values present?"""

data.isna().values.any()

"""3. Are there any duplicate rows?"""

data.duplicated().values.any()

duplicated_rows = data[data.duplicated()]
len(duplicated_rows)

"""4. What are the data types of the columns?"""

data.info()

"""### Data Type Conversions

Convert the `USD_Production_Budget`, `USD_Worldwide_Gross`, and `USD_Domestic_Gross` columns to a numeric format by removing `$` signs and `,`.
"""

chars_to_remove = [',', '$']
columns_to_clean = ['USD_Production_Budget', 
                    'USD_Worldwide_Gross',
                    'USD_Domestic_Gross']

for col in columns_to_clean:
  for char in chars_to_remove:
    data[col] = data[col].astype(str).str.replace(char, "")
  data[col] = pd.to_numeric(data[col])

data.head()

"""Convert the `Release_Date` column to a Pandas Datetime type. """

data.Release_Date = pd.to_datetime(data.Release_Date)

data.head()

"""### Descriptive Statistics

1. What is the average production budget of the films in the data set?
"""

data.USD_Production_Budget.mean()

"""2. What is the average worldwide gross revenue of films?"""

data.USD_Worldwide_Gross.mean()

"""3. What were the minimums for worldwide and domestic revenue?"""

data.USD_Worldwide_Gross.min()

data.USD_Domestic_Gross.min()

"""4. Are the bottom 25% of films actually profitable or do they lose money?
5. What are the highest production budget and highest worldwide gross revenue of any film?
6. How much revenue did the lowest and highest budget films make?
"""

data.describe()

"""# Investigating the Zero Revenue Films

How many films grossed $0 domestically (i.e., in the United States)? What were the highest budget films that grossed nothing?
"""

zero_domestic = data[data.USD_Domestic_Gross ==0]

print(f'Number of films that grossed $0 domestically {len(zero_domestic)}')

zero_domestic.sort_values('USD_Production_Budget', ascending=False)

"""How many films grossed $0 worldwide? What are the highest budget films that had no revenue internationally?"""

zero_worldwide = data[data.USD_Worldwide_Gross == 0]
print(f'Number of films that grossed $0 worldwide {len(zero_worldwide)}')
zero_worldwide.sort_values('USD_Production_Budget', ascending=False)

"""### Filtering on Multiple Conditions"""

international_releases = data.loc[(data.USD_Domestic_Gross == 0) & 
                                  (data.USD_Worldwide_Gross != 0)]

len(international_releases)

international_releases.head()

"""Create a subset for international releases that had some worldwide gross revenue, but made zero revenue in the United States. """

international_releases = data.query('USD_Domestic_Gross == 0 and USD_Worldwide_Gross != 0')

len(international_releases)

international_releases.head()

"""### Unreleased Films

* Identify which films were not released yet as of the time of data collection (May 1st, 2018).
* How many films are included in the dataset that have not yet had a chance to be screened in the box office? 

"""

# Date of Data Collection
scrape_date = pd.Timestamp('2018-5-1')

future_release = data[data.Release_Date >= scrape_date]

len(future_release)

future_release

"""* Create another DataFrame called data_clean that does not include these films. """

data_clean = data.drop(future_release.index)

"""### Films that Lost Money

What is the percentage of films where the production costs exceeded the worldwide gross revenue? 
"""

money_losing = data_clean.loc[data_clean.USD_Production_Budget > data_clean.USD_Worldwide_Gross]

len(money_losing)/len(data_clean)

"""# Seaborn for Data Viz: Bubble Charts"""

plt.figure(figsize=(8,4), dpi=200)
 
ax = sns.scatterplot(data=data_clean,
                     x='USD_Production_Budget', 
                     y='USD_Worldwide_Gross')
 
ax.set(ylim=(0, 3000000000),
       xlim=(0, 450000000),
       ylabel='Revenue in $ billions',
       xlabel='Budget in $100 millions')
 
plt.show()

"""### Plotting Movie Releases over Time


"""

plt.figure(figsize=(8,4), dpi=200)
 
# set styling on a single chart
with sns.axes_style('darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                       x='USD_Production_Budget', 
                       y='USD_Worldwide_Gross',
                       hue='USD_Worldwide_Gross',
                       size='USD_Worldwide_Gross')
 
  ax.set(ylim=(0, 3000000000),
        xlim=(0, 450000000),
        ylabel='Revenue in $ billions',
        xlabel='Budget in $100 millions')

plt.figure(figsize=(8,4), dpi=200)
 
# set styling on a single chart
with sns.axes_style('darkgrid'):
  ax = sns.scatterplot(data=data_clean,
                       x='Release_Date', 
                       y='USD_Worldwide_Gross',
                       hue='USD_Worldwide_Gross',
                       size='USD_Worldwide_Gross')
 
  ax.set(ylim=(0, 4500000000),
        xlim=(data_clean.Release_Date.min(), data_clean.Release_Date.max()),
        ylabel='Revenue in $ billions',
        xlabel='Budget in $100 millions')

"""# Converting Years to Decades Trick


"""

dt_index = pd.DatetimeIndex(data_clean.Release_Date)
years = dt_index.year

decades = years // 10*10

data_clean['Decade'] = decades

data_clean.head()

"""### Separate the "old" (before 1969) and "New" (1970s onwards) Films

* `old_films` should include all the films before 1969 (up to and including 1969)
* `new_films` should include all the films from 1970 onwards

"""

old_films = data_clean[data_clean.Decade <= 1960]
new_films = data_clean[data_clean.Decade > 1960]

data_clean.head()

"""* How many films were released prior to 1970?"""

old_films.describe()

new_films.describe()

"""# Seaborn Regression Plots"""

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("whitegrid"):
  sns.regplot(data=old_films,
            x='USD_Production_Budget',
            y='USD_Worldwide_Gross',
            scatter_kws = {'alpha': 0.4},
            line_kws = {'color': 'black'})

"""
* Do our data points for the new films align better or worse with the linear regression than for our older films?
* Roughly how much would a film with a budget of $150 million make according to the regression line?"""

plt.figure(figsize=(8,4), dpi=200)

with sns.axes_style("darkgrid"):
  ax = sns.regplot(data=new_films,
            x='USD_Production_Budget',
            y='USD_Worldwide_Gross',
            color='#2f4b7c',
            scatter_kws = {'alpha': 0.3},
            line_kws = {'color': '#ff7c43'})
  
  ax.set( ylim=(0, 3000000000),
          xlim=(0, 450000000),
          ylabel='Revenue in $ billions',
          xlabel='Budget in $100 millions')

"""# Run Your Own Regression with scikit-learn

$$ REV \hat ENUE = \theta _0 + \theta _1 BUDGET$$
"""

regression = LinearRegression()

# Explanatory Variable(s) or Feature(s)
X = pd.DataFrame(new_films, columns=['USD_Production_Budget'])
 
# Response Variable or Target
y = pd.DataFrame(new_films, columns=['USD_Worldwide_Gross']) 

# Find the best-fit line
regression.fit(X, y)

regression.intercept_

regression.coef_

# R-squared
regression.score(X, y)

"""Run a linear regression for the `old_films`. Calculate the intercept, slope and r-squared. How much of the variance in movie revenue does the linear model explain in this case?"""

regression1 = LinearRegression()
# Explanatory Variable(s) or Feature(s)
X = pd.DataFrame(old_films, columns=['USD_Production_Budget'])
 
# Response Variable or Target
y = pd.DataFrame(old_films, columns=['USD_Worldwide_Gross']) 

# Find the best-fit line
regression1.fit(X, y)

regression1.intercept_

regression1.coef_

# R-squared
regression1.score(X, y)

"""# Use Your Model to Make a Prediction

We just estimated the slope and intercept! Remember that our Linear Model has the following form:

$$ REV \hat ENUE = \theta _0 + \theta _1 BUDGET$$

How much global revenue does our model estimate for a film with a budget of $350 million? 
"""

budget = 350000000
revenue_estimate = regression.intercept_[0] + regression.coef_[0,0]*budget
revenue_estimate = round(revenue_estimate, -6)

print(f'The estimated revenue for a $350 film is around ${revenue_estimate:.10}.')